Ext.define("Shared.util.ModelLoader",{singleton:true,Load:function(d){for(var b=0;b<d.length;b++){if(d[b].Properties.length==0){continue}var a=[];for(var c=0;c<d[b].Properties.length;c++){a.push({name:d[b].Properties[c].Name,type:d[b].Properties[c].Type.toLowerCase()})}Ext.define(d[b].Name,{extend:"Ext.data.Model",clientIdProperty:"Id",fields:a})}}});Shared.util.ModelLoader.Load(Ext.app.REMOTE_MODELS);Ext.define("Shared.util.Process",{currentProcessNr:0,doProcess:function(d){var e=this;if(typeof(e.spot)=="undefined"){e.spot=Ext.create("Shared.util.Spotlight",{easing:"easeOut",duration:300})}e.name=d;var c;var h=e.Processes[d];var g=h[e.currentProcessNr];var f=e.query(g.component);if(f.length==1){c=f[0]}if(c.el){e.spot.show(c.el)}c.on("click",function(){if(e.currentProcessNr==(h.length-1)){e.spot.hide();e.tooltip.destroy()}});var b={target:c.el,anchor:"left",title:d,html:g.text,dockedItems:[{xtype:"toolbar",baseCls:"none",dock:"bottom",items:["->",new Ext.Button({text:"Next",hidden:(e.currentProcessNr==(h.length-1)),handler:e.processNext,scope:e})]}],minWidth:100,minHeight:100,autoHide:false,closable:true};e.tooltip=Ext.create("Ext.tip.ToolTip",b);var a=Ext.Function.createDelayed(function(){e.tooltip.el.dom.style.zIndex=222001},50);e.tooltip.show();e.tooltip.zIndexManager.setBase().zseed=222001;a()},processNext:function(){var a=this;a.tooltip.destroy();a.currentProcessNr++;a.doProcess(a.name)}});Ext.define("Shared.util.Spotlight",{mixins:{observable:Ext.util.Observable},baseCls:"x-spotlight",animate:true,duration:250,easing:null,active:false,constructor:function(a){var b=this;b.mixins.observable.constructor.call(b)},createElements:function(){var a=Ext.getBody();this.right=a.createChild({cls:this.baseCls});this.left=a.createChild({cls:this.baseCls});this.top=a.createChild({cls:this.baseCls});this.bottom=a.createChild({cls:this.baseCls});this.all=Ext.create("Ext.CompositeElement",[this.right,this.left,this.top,this.bottom])},show:function(b,c,a){this.el=Ext.get(b);if(!this.right){this.createElements()}if(!this.active){this.all.setDisplayed("");this.active=true;Ext.EventManager.onWindowResize(this.syncSize,this);this.applyBounds(this.animate,false)}else{this.applyBounds(false,false)}},hide:function(b,a){Ext.EventManager.removeResizeListener(this.syncSize,this);this.applyBounds(this.animate,true)},syncSize:function(){this.applyBounds(false,false)},applyBounds:function(a,g){var j=this,e=j.el.getBox();var f=Ext.core.Element.getViewWidth(true);var c=Ext.core.Element.getViewHeight(true);var d=0,b=false,l,k;l={right:{x:e.right,y:c,width:(f-e.right),height:0},left:{x:0,y:0,width:e.x,height:0},top:{x:f,y:0,width:0,height:e.y},bottom:{x:0,y:(e.y+e.height),width:0,height:(c-(e.y+e.height))+"px"}};k={right:{x:e.right,y:e.y,width:(f-e.right)+"px",height:(c-e.y)+"px"},left:{x:0,y:0,width:e.x+"px",height:(e.y+e.height)+"px"},top:{x:e.x,y:0,width:(f-e.x)+"px",height:e.y+"px"},bottom:{x:0,y:(e.y+e.height),width:(e.x+e.width)+"px",height:(c-(e.y+e.height)+1)+"px"}};if(g){var h=Ext.clone(l);l=k;k=h;delete h}if(a){Ext.each(["right","left","top","bottom"],function(i){j[i].setBox(l[i]);j[i].animate({duration:j.duration,easing:j.easing,to:k[i]})},this)}else{Ext.each(["right","left","top","bottom"],function(i){j[i].setBox(Ext.apply(l[i],k[i]))},this)}},destroy:function(){Ext.destroy(this.right,this.left,this.top,this.bottom);delete this.el;delete this.all}});Ext.direct.Manager.addProvider(Ext.app.REMOTING_API);Ext.define("Shared.util.StoreManager",{singleton:true,stores:{},GetStore:function(f,a,h,b){if(typeof(this.stores[f])=="undefined"){var e=Ext.create(f);var c=[];for(var g in h){c.push(g)}var d={model:f,proxy:Ext.create("Ext.data.proxy.Direct",{type:"direct",directFn:a,paramsAsHash:false,paramOrder:c,extraParams:h})};Ext.applyIf(d,b);this.stores[f]=Ext.create("Ext.data.Store",d)}return this.stores[f]}});Ext.define("GenPres.view.login.LoginWindow",{extend:Ext.Window,alias:"widget.userlogin",bodyPadding:5,closable:false,title:"GenPres Login",defaultDatabase:"Default Database",initComponent:function(){var a=this;Ext.applyIf(a,{mixins:{process:"Shared.util.Process"}});a.dockedItems=a.createDockedItems();a.items=this.createItems();a.callParent(arguments)},Processes:{Login:[{component:"form",text:"Dit formulier kan gebruikt worden om in te loggen."},{component:"form textfield[name=username]",text:"Vul uw gebruikersnaam in."},{component:"form textfield[name=password]",text:"Vul uw wachtwoord in."},{component:"toolbar button[action=login]",text:"Klik op de login button om de applicatie te starten."}]},getLoginButton:function(){return Ext.ComponentQuery.query("toolbar button[action=login]")},createDockedItems:function(){return[{xtype:"toolbar",dock:"bottom",items:["->",{text:"Login",action:"login"}]}]},createItems:function(){var a=this;return[a.getHtmlImage(),a.getLoginForm2()]},afterRender:function(){this.callParent(arguments)},getImagePath:function(){return"Frontend/Styles/GenPres/Images/MedicalBanner.jpg"},getHtmlImage:function(){var b=this,a=b.getImagePath();return{html:"<img src="+a+" />",height:180,xtype:"box"}},getLoginForm2:function(){var a=this;return{xtype:"form",border:false,bodyPadding:15,width:541,defaults:{allowBlank:false},items:[{xtype:"textfield",fieldLabel:"Gebruikersnaam",name:"username",margin:"10 0 10 10",value:"peter"},{xtype:"textfield",inputType:"password",fieldLabel:"Wachtwoord",name:"password",margin:"0 0 10 10",value:"test"},Ext.create("GenPres.view.login.LogicalUnitSelector",{name:"loginLogicalUnitSelector"})]}},advancedLoginFieldSet:function(){var a=this;return{xtype:"fieldset",layout:"hbox",collapsible:true,collapsed:true,margin:"65 0 0 0",items:[a.createDatabaseCombo(),a.createRegisterDatabaseButton()]}},createDatabaseCombo:function(){var a=this;return{xtype:"combo",name:"database",fieldLabel:"Database",displayField:"DatabaseName",store:a.getDatabaseStore()}},getDatabaseStore:function(){return""},createRegisterDatabaseButton:function(){return{xtype:"button",text:"Registreer Database",action:"registerdatabase"}}});Ext.define("GenPres.session.PatientSession",{currentLogicalUnitId:0,currentLogicalUnitName:"",singleton:true,patient:{PID:""},setLogicalUnit:function(b,a){this.currentLogicalUnitId=b;this.currentLogicalUnitName=a},getLogicalUnitId:function(){return this.currentLogicalUnitId},getLogicalUnitName:function(){return this.currentLogicalUnitName},setPatient:function(a){this.patient.PID=a.data.PID}});Ext.define("GenPres.view.main.MainViewLeft",{extend:Ext.Panel,layout:"vbox",region:"west",xtype:"panel",border:false,title:"Patienten",collapsible:true,autoScroll:true,layout:{type:"vbox",align:"stretch"},width:300,split:true,margins:"0 0 0 0",initComponent:function(){var a=this;a.items=[{xtype:"box",border:false,html:'<div style="text-align:center"><img src="ClientApplications/Styles/GenPres/images/logo.png" style="margin-top:22px;" /></div>',height:82},Ext.create("GenPres.view.main.PatientTree",{name:"mainPatientTree"})];a.callParent()}});Ext.define("GenPres.controller.patient.Patient",{extend:Ext.app.Controller,alias:"widget.patientcontroller",views:["login.LoginWindow"],logicalUnitId:null,init:function(){this.control({treepanel:{beforeitemclick:this.checkRootNode,itemclick:this.loadPatientData},patientlist:{select:this.loadPatientData,render:this.loadPatientList}})},hoverItem:function(b,a,f,c,g,d){extItem=Ext.get(f);extItem.animate({easing:"easeIn",duration:50,to:{backgroundColor:"#fff",color:"#3892D3"}})},unhoverItem:function(b,a,f,c,g,d){extItem=Ext.get(f);extItem.animate({easing:"easeIn",duration:1,to:{backgroundColor:"#3892D3",color:"#fff"}})},loadPatientList:function(a){a.store.proxy.extraParams.logicalUnit=this.logicalUnitId;a.store.reload()},checkRootNode:function(a,b,h,d,f,c){if(d==0){var g=this.getPatientPatientInfoStoreStore();var e=this.getTreePanel();if(typeof(g.getAt(0))!="undefined"){e.selModel.select(g.getAt(0))}return false}},loadPatientData:function(a,b,g,d,e,c){var f=GenPres.application.getController("prescription.PrescriptionController");f.loadPrescriptionForm()},setPatientWeight:function(b){var a=this.getPrescriptionPatientComponent();a.down("unitvaluefield[name=patientWeight]").setValue(b)},setPatientLength:function(a,c){var b=this.getPrescriptionPatientComponent();b.down("unitvaluefield[name=patientLength]").setValue(a)},getPrescriptionPatientComponent:function(){return GenPres.application.MainCenter.query("prescriptionpatient")[0]},getGridPanel:function(){return GenPres.application.MainCenter.query(".prescriptiongrid")[0]},setLogicalUnitId:function(b){var a=this;a.logicalUnitId=b},getLogicalUnitId:function(){var a=this;return a.logicalUnitId},getTreePanel:function(){return GenPres.application.viewport.query(".patienttree")[0]}});Ext.define("GenPres.controller.login.Login",{extend:Ext.app.Controller,alias:"widget.logincontroller",views:["GenPres.view.login.LoginWindow"],loggedIn:false,loginWindow:null,init:function(){var a=this;this.control({"window button[text=Login]":{click:a.onClickValidateLogin},"button[action=registerdatabase]":{click:a.showRegisterDatabaseWindow},'window[title="Registreer Database"] button[action=save]':{click:a.onClickSaveDatabaseRegistration},dataview:{itemclick:function(c,b,f,d,e){var g=a.getController("GenPres.controller.patient.Patient");g.setLogicalUnitId(b.data.Id)}}})},getLoginWindow:function(){var b=this,a;a=b.getGenPresViewLoginLoginWindowView().create();return a},setDefaultDatabase:function(b){var c,a=Ext.create("GenPres.lib.util.QueryHelper");c=Ext.ComponentQuery.query("window[title="+b.title+"] combobox[name=database]")[0]},onClickValidateLogin:function(a){var d,b,c;d=a.up("window");this.loginWindow=d;b=d.down("form");c=b.getValues();this.validateLogin(c)},validateLogin:function(a){if(this.validateLoginForm(a)){Login.Authenticate(a.username,a.password,this.loginCallBackFunction,this)}},validateLoginForm:function(c){var a="";if(c.username==""){a+="Selecteer aub een gebruikersnaam<br />"}if(c.password==""){a+="Selecteer aub een wachtwoord<br />"}var b=this.getController("GenPres.controller.patient.Patient");if(b.getLogicalUnitId()==null){a+="Selecteer aub een afdeling\n"}if(a!=""){Ext.MessageBox.alert("GenPres 2011 Login Error",a)}return a==""},loginCallBackFunction:function(a){var b=this;b.processAuthentication(a.success)},processAuthentication:function(a){var b=this;b.loggedIn=a;if(a){b.closeLoginWindow();GenPres.application.getViewPort()}else{Ext.MessageBox.alert("GenPres 2011 Login","Login geweigerd")}},closeLoginWindow:function(){var a=this;a.loginWindow.close()},showRegisterDatabaseWindow:function(){var a=this;a.createRegisterDatabaseWindow().show()},createRegisterDatabaseWindow:function(){var a=this;return a.getDatabaseRegisterDatabaseWindowView().create()},onClickSaveDatabaseRegistration:function(a){var b=this;Database.SaveDatabaseRegistration(b.getWindowFromButton(a).getDatabaseName(),b.getWindowFromButton(a).getMachineName(),b.getWindowFromButton(a).getGenPresConnectionString(),b.getWindowFromButton(a).getPDMSConnectionString(),b.getWindowFromButton(a).getGenFormWebservice(),b.onDatabaseRegistrationSaved);b.getWindowFromButton(a).close()},getWindowFromButton:function(a){return a.up().up()},onDatabaseRegistrationSaved:function(a){var b=this;if(a.success){Ext.MessageBox.alert("Database Registration",a.databaseName)}else{Ext.MessageBox.alert("Database Regstration","Database could not be registered")}}});Ext.define("GenPres.test.usecase.LoginTest",{describe:"Login tests that",tests:function(){var d=this,f="",e="Login geweigerd",b="Login succesvol",a="GenPres 2011 Login Error",c=5000;d.getLoginController=function(){return GenPres.application.getController("login.Login")};d.getLoginWindow=function(){return Ext.ComponentQuery.query('window[title="GenPres Login"]')[0]};d.getLoginButton=function(){return Ext.ComponentQuery.query("toolbar button[action=login]")[0]};d.getFormField=function(g){return Ext.ComponentQuery.query("textfield[name="+g+"]")[0]};d.getPatientInfoView=function(g){return Ext.ComponentQuery.query("dataview[name="+g+"]")[0]};d.setFormField=function(g,h){g.inputEl.dom.value=h;g.value=h;return true};d.clickButton=function(g){g.btnEl.dom.click()};d.checkLoginMessage=function(){var g=Ext.ComponentQuery.query("messagebox");if(g.length>0){if(g[0].cfg){if(g[0].cfg.msg===f||g[0].cfg.title==f){Ext.ComponentQuery.query("button[text=OK]")[0].btnEl.dom.click();return true}}}return false};it("There should be a login controller",function(){expect(d.getLoginController()).toBeDefined()});it("The user should see a login window at start up with title GenPres Login",function(){var g=d.getLoginWindow();expect(g).toBeDefined()});it("This window should not be closable",function(){var g=d.getLoginWindow();expect(g.closable===false).toBeTruthy()});it("User must select a username, password and department",function(){var g=d.getLoginButton();f=a;waitsFor(d.checkLoginMessage,"waiting for an error message",c);d.clickButton(g)});it("User can set username and password",function(){var h=d.getFormField("username"),g=d.getFormField("password");d.setFormField(h,"Invalid");d.setFormField(g,"Invalid");expect(h.value).toBe("Invalid");expect(g.value).toBe("Invalid")});it("User can select a departement",function(){var g=d.getPatientInfoView("loginLogicalUnitSelector");waitsFor(function(){if(g.store.getCount()>0){g.el.dom.childNodes[0].childNodes[0].click();return g.selModel.getSelection().length==1}return false},"logicalUnitSelector to be rendered",2000)});it("If Username or password is invalid, user still cannot login",function(){var g=d.getLoginButton();d.clickButton(g);f=e;waitsFor(d.checkLoginMessage,"waiting for refusal message",c)});it("User can login using a valid name and password",function(){var h=d.getLoginButton(),j=d.getFormField("username"),i=d.getFormField("password");d.setFormField(j,"peter");d.setFormField(i,"test");var g=d.getLoginController();spyOn(g,"processAuthentication").andCallThrough();d.clickButton(h);waitsFor(function(){var k=Ext.ComponentQuery.query("patientlist");if(k.length>0){expect(g.processAuthentication).toHaveBeenCalledWith(true);return true}return false},"waiting for successfull login",c)})}});Ext.Loader.setConfig({enabled:true,paths:{Shared:"./Frontend/Shared",GenPres:"./Frontend/GenPres"}});Ext.application({autoCreateViewport:false,name:"GenPres",models:[],paths:{Shared:"./Frontend/Shared",GenPres:"./Frontend/GenPres"},appFolder:"./Frontend/GenPres",views:[],stores:[],controllers:["GenPres.controller.login.Login","GenPres.controller.patient.Patient"],getViewPort:function(){this.viewport=Ext.create("Ext.Viewport",{layout:{type:"border",padding:1},defaults:{split:true},items:[Ext.create("GenPres.view.main.MainViewLeft"),Ext.create("GenPres.view.main.MainViewCenter")]});return this.viewport},launch:function(){var a=this;GenPres.application=a;a.setDefaults();var b=document.URL.split("?");var c=Ext.urlDecode(b[b.length-1]);if(typeof(c.test)!="undefined"&&c.test!=""){a.runTests(c.test)}else{a.showLoginWindow()}},runTests:function(c){var b=this;if(c=="usecase"){b.showLoginWindow();var a=Ext.create("GenPres.test.usecase.LoginTest");describe(a.describe,a.tests)}if(c=="integration"){}jasmine.getEnv().addReporter(new jasmine.TrivialReporter());jasmine.Queue(jasmine.getEnv());jasmine.getEnv().execute()},showLoginWindow:function(){var b=this,a;a=b.getLoginWindow().show()},getLoginWindow:function(){var a=this;return a.getController("GenPres.controller.login.Login").getLoginWindow()},setDefaults:function(){Ext.override(Ext.form.field.ComboBox,{displayField:"Value",typeAhead:true,queryMode:"local",width:140,typeAheadDelay:0,queryDelay:0,validateOnBlur:false,validationDelay:0,forceSelection:true,triggerAction:"all",labelAlign:"top",selectOnFocus:true})}});Ext.define("GenPres.controller.Main",{extend:Ext.app.Controller});Ext.define("GenPres.test.TestList",{tests:["GenPres.test.extjs.ClassTests","GenPres.test.extjs.ComponentQueryTests","GenPres.test.extjs.LoaderTests","GenPres.test.controller.LoginControllerTests"]});Ext.define("GenPres.test.TestLoader",{loadTests:function(b){var c;for(var a=0;a<b.tests.length;a++){c=Ext.create(b.tests[a]);describe(c.describe,c.tests)}}});Ext.define("GenPres.test.control.UnitValueFieldTest",{describe:"GenPres.control.UnitValueField",tests:function(){var b=this,a,c;b.getViewForControl=function(e){if(!a){var d=Ext.create("Ext.data.ArrayStore",{autoDestroy:true,fields:["Value"],data:[["g"],["mg"],["microg"]]});a=Ext.create("GenPres.control.UnitValueField",{fieldLabel:"Test",labelAlign:"left",unitStore:d,name:"test"})}return a};b.createTestWindow=function(){c=Ext.create("Ext.Window",{items:b.getViewForControl(),padding:"50 50 50 50",border:0,height:520,width:900});c.show();return c};it("can be created",function(){expect(b.getViewForControl()).toBeDefined()});it("can be rendered",function(){expect(b.createTestWindow()).toBeDefined()});it("has a setValue function",function(){expect(typeof(b.getViewForControl().setValue)=="function").toBeTruthy()});it("has a getValue function",function(){expect(typeof(b.getViewForControl().getValue)=="function").toBeTruthy()});it("can set a and get value",function(){b.getViewForControl().setValue({value:200,unit:"mg"});var d=b.getViewForControl().getValue();expect(d.value==200&&d.unit=="mg").toBeTruthy()});it("has a setState function",function(){expect(typeof(b.getViewForControl().setState)=="function").toBeTruthy()});it("can set state to user",function(){b.getViewForControl().setState(GenPres.control.states.calculated);var d=b.getViewForControl().getValue();expect(b.getViewForControl().state==GenPres.control.states.calculated).toBeTruthy()});it("has a getInputEl function",function(){expect(typeof(b.getViewForControl().getInputEl)=="function").toBeTruthy()});it("has a setInputColor function",function(){expect(b.getViewForControl().setInputColor).toBeDefined()});it("can set input color to orange",function(){b.getViewForControl().setInputColor("orange");expect(b.getViewForControl().getInputEl().style.borderColor=="orange").toBeTruthy()});it("can set state to user",function(){b.getViewForControl().setState(GenPres.control.states.user);expect(b.getViewForControl().getInputEl().style.borderColor=="lime").toBeTruthy()});it("has a setHidden function",function(){expect(b.getViewForControl().setHidden).toBeDefined()});it("can be set hidden",function(){b.getViewForControl().setHidden(true)});it("can be set hidden",function(){b.getViewForControl().setHidden(true);expect(b.getViewForControl().getEl().dom.style.visibility=="hidden").toBeTruthy()});it("can be set visible",function(){b.getViewForControl().setHidden(false);expect(b.getViewForControl().getEl().dom.style.visibility=="").toBeTruthy()});it("can be destroyed",function(){b.getViewForControl().destroy();expect(b.getViewForControl().isDestroyed).toBeTruthy();c.close()})}});Ext.define("GenPres.test.controller.LoginControllerTests",{describe:"Login controller should",tests:function(){it("Controller validateLogin should call validateLoginForm",function(){var a=GenPres.application.getController("GenPres.controller.login.Login");spyOn(a,"validateLoginForm");a.validateLogin({username:"",password:""});expect(a.validateLoginForm).toHaveBeenCalled()});it("Controller validateLogin should call a backend login function",function(){var a=GenPres.application.getController("GenPres.controller.login.Login");spyOn(a,"loginCallBackFunction");GenPres.session.PatientSession.setLogicalUnit(1,"test");a.validateLogin({username:"blah",password:"blah"});waitsFor(function(){return a.loginCallBackFunction.wasCalled},"waiting for loginCallBackFunction call",3000)});it("Controller validateLogin throws an error when no username and password is chosen",function(){var a=GenPres.application.getController("GenPres.controller.login.Login");GenPres.session.PatientSession.setLogicalUnit(1,"test");var b=a.validateLoginForm({username:"",password:""});expect(b).toBe(false)});it("Controller validateLogin throws an error when no password is chosen",function(){var a=GenPres.application.getController("GenPres.controller.login.Login");GenPres.session.PatientSession.setLogicalUnit(1,"test");var b=a.validateLoginForm({username:"test",password:""});expect(b).toBe(false)});it("Controller validateLogin throws an error when no username is chosen",function(){var a=GenPres.application.getController("GenPres.controller.login.Login");GenPres.session.PatientSession.setLogicalUnit(1,"test");var b=a.validateLoginForm({username:"",password:"test"});expect(b).toBe(false)});it("Controller validateLogin throws an error when no logicalUnit is chosen",function(){var a=GenPres.application.getController("GenPres.controller.login.Login");GenPres.session.PatientSession.setLogicalUnit(0,"");var b=a.validateLoginForm({username:"test",password:"test"});if(Ext.ComponentQuery.query("window").length==1){Ext.ComponentQuery.query("window")[0].close()}expect(b).toBe(false)})}});Ext.define("GenPres.test.extjs.ClassTests",{describe:"Ext.Class",tests:function(){var a,b;Ext.define("Tests.BaseClass",{config:{name:"baseClass"},constructor:function(c){var d=this;console.log("Base Class gets constructed");d.initConfig(c);return d}});Ext.define("Tests.MyCoolMixin",{someUseFullFunction:function(){console.log("I can do something usefull")}});Ext.define("Tests.MyClass",{extend:Tests.BaseClass,testProperty:"test property",mixins:{somethingUseFull:Tests.MyCoolMixin},config:{name:"name of the instance",someOtherProp:"some other prop"},constructor:function(c){var d=this;console.log("MyClass gets constructed");d=d.initConfig(c);d.callParent();return d},applyName:function(c){var d=this;if(!Ext.isString(c)||c.length===0){d.throwError()}else{return c}},throwError:function(){throw new Error("["+Ext.getDisplayName(arguments.callee)+"] cannot have an empty string as a name")}});b=function(c){if(!a){return Ext.create("Tests.MyClass",c)}};it("can create an instance of Tests.MyClass",function(){expect(b({name:"test"})).toBeDefined()});it("an instance of Tests.MyClass should have a getter and setter method for name",function(){var c=b({name:"test"});expect(c.getName).toBeDefined();expect(c.setName).toBeDefined()});it("Tests.MyClass should not accept an empty string for name",function(){var c=b({name:"test"});spyOn(c,"throwError");c.setName("");expect(c.throwError).toHaveBeenCalled()});it("a valid name can be set",function(){var c=b({}),d="test";c.setName(d);expect(c.getName()).toBe(d)});it("the name property can be reset",function(){var d="instance",c=b({name:d});expect(c.getName()).toBe(d)});it("the test class should contain the method from the mixin",function(){var c=b({});expect(c.someUseFullFunction).toBeDefined();spyOn(c,"someUseFullFunction");c.someUseFullFunction();expect(c.someUseFullFunction).toHaveBeenCalled()});it("the test class should have a testProperty",function(){expect(b().testProperty).toBeDefined()})}});Ext.define("GenPres.test.extjs.ComponentQueryTests",{describe:"Ext.ComponentQuery",tests:function(){var a;a=function(){return Ext.create("Ext.form.Panel",{id:"testform",title:"test",items:[{xtype:"textfield",name:"test"}]})};it("a test form should be created",function(){expect(a()).toBeDefined()});it("component query finds the panel",function(){expect(Ext.ComponentQuery.query("#testform").length).toBe(1)});it("should be able to get the testform using the title",function(){expect(Ext.ComponentQuery.query('panel[title="test"]').length).toBe(1)});it("if you go down from testform you get a textfield",function(){expect(a().down("textfield").name).toBe("test")})}});Ext.define("GenPres.test.extjs.LoaderTests",{describe:"Ext.Loader",tests:function(){var a=this;it("should be enabled",function(){expect(Ext.Loader.config.enabled).toBe(true)});it("should have a GenPres path",function(){expect(Ext.Loader.config.paths.GenPres).toBeDefined()})}});Ext.define("GenPres.test.extjs.ModelTests",{describe:"Ext.data.Model",tests:function(){var c=this,a,b=200;it("a test model should be created",function(){expect(window).toBeDefined()})}});Ext.define("GenPres.test.extjs.StoreTests",{describe:"Ext.data.Store",tests:function(){var d=this,c=200,a="Test.storetests.TestModel",b=false;Ext.define(a,{extend:"Ext.data.Model",fields:[{name:"id",type:"integer",mapping:"ProductId"},{name:"Test",type:"string",mapping:"ProductName"}],proxy:{type:"direct",paramsAsHash:true,directFn:Product.GetProduct,api:{read:Product.GetProduct,submit:Product.SaveProduct}},reader:{type:"direct",root:"data",idProperty:"ProductId"}});Ext.define("Test.storetests.TestStore",{extend:Ext.data.Store,storeId:"teststore",model:a,autoLoad:false});d.createTestStore=function(){return Ext.create("Test.storetests.TestStore")};it("a test model is defined",function(){expect(Ext.ModelManager.getModel(a)).toBeDefined()});it("teststore is created",function(){expect(d.createTestStore()).toBeDefined()});it("teststore can be loaded",function(){d.createTestStore().load({callback:function(f,e,g){b=true}});waitsFor(function(){return b},"waiting for loading of teststore",c)})}});Ext.define("GenPres.test.model.LoginModelTests",{describe:"GenPres.model.user.Login",tests:function(){var b,c,e,d,a;e=function(){return Ext.create("GenPres.model.user.Login")};b=function(){if(!Ext.ModelManager.getModel("GenPres.model.user.Login")){e()}return Ext.ModelManager.getModel("GenPres.model.user.Login")};it("UserLoginModel should be registered",function(){expect(b()).toBeDefined()});it("LoginModel should be instantiated by Ext.create",function(){c=e();expect(c).toBeDefined();c=null})}});Ext.define("GenPres.test.store.ProductSubstanceStoreTests",{describe:"GenPres.store.product.ProductSubstance",tests:function(){var a,b;a=function(){return Ext.create("GenPres.store.product.ProductSubstance")};b=function(){return Ext.getStore("productsubstancestore")};it("GenPres.store.product.ProductSubstanceStore should be created",function(){expect(a()).toBeDefined()});it("GenPres.store.product.ProductSubstanceStore should be defined",function(){expect(b()).toBeDefined()})}});Ext.define("GenPres.test.store.SubstanceUnit",{describe:"GenPres.store.prescription.SubstanceUnit",tests:function(){var a=this;a.createSubstanceUnitStore=function(){return Ext.create("GenPres.store.prescription.SubstanceUnit")};a.getSubstanceUnitStore=function(){return Ext.getStore("substanceunit")};it("GenPres.store.prescription.SubstanceUnit can be created",function(){expect(a.createSubstanceUnitStore()).toBeDefined()});it("substanceunit alias can be called",function(){expect(a.getSubstanceUnitStore()).toBeDefined()});it("GenPres.store.prescription.SubstanceUnit contains extraparam generic",function(){expect(a.getSubstanceUnitStore().proxy.extraParams.generic).toBeDefined()});it("GenPres.store.prescription.SubstanceUnit contains extraparam route",function(){expect(a.getSubstanceUnitStore().proxy.extraParams.route).toBeDefined()});it("GenPres.store.prescription.SubstanceUnit contains extraparam shape",function(){expect(a.getSubstanceUnitStore().proxy.extraParams.shape).toBeDefined()})}});Ext.define("GenPres.test.usecase.AdvancedLoginTest",{describe:"Advanced login tests that:",tests:function(){var g=this,i=Ext.create("GenPres.lib.util.QueryHelper"),a=Ext.create("GenPres.lib.util.MessageChecker"),f="TestDatabase",c="development-p",j="window[title=Registreer Database]",b="Data Source=localhost;Initial Catalog=GenPres;User ID=sa;Password=838839713",e="Data Source=localhost;Initial Catalog=MVTest;User ID=sa;Password=838839713",d="http://localhost/GenForm/Products.asmx",k="",h=500;g.getAdvancedLogin=function(){return Ext.ComponentQuery.query("userlogin fieldset")[0]};g.toggleAdvancedLogin=function(){g.getAdvancedLogin().toggle()};g.getSelectDatabaseCombo=function(){return i.getFormComboBox("userlogin","database")};g.clickNewDatabase=function(){i.clickButton(i.getButton("window","Registreer Database"))};g.getRegisterDatabaseWindow=function(){return i.getWindow("window[title=Registreer Database]")};g.getDatabaseNameField=function(){return i.getFormTextField(j,"databasename")};g.getMachineNameField=function(){return i.getFormTextField(j,"machinename")};g.getGenPresConnectionField=function(){return i.getFormTextField(j,"genpresconnectionstring")};g.getPdmsConnectionField=function(){return i.getFormTextField(j,"patientdbconnectionstring")};g.getGenFormWebserviceField=function(){return i.getFormTextField(j,"genformwebservice")};g.clickRegisterDatabaseButton=function(){i.clickButton(g.getRegisterDatabaseButton())};g.getRegisterDatabaseButton=function(){return i.getButton("window","Opslaan")};g.checkMessage=function(){if(a.checkMessage(k)){k="";return true}else{return false}};it("The user can select an advanced login option",function(){g.toggleAdvancedLogin();expect(g.getAdvancedLogin().collapsed).toBeFalsy()});it("Advance login has a combobox to select a database",function(){expect(g.getSelectDatabaseCombo()).toBeDefined()});it("A default database is selected",function(){var l="Default Database",m=g.getSelectDatabaseCombo();expect(m.getValue()).toBe(l)});it("The user can select a database to login",function(){var l="TestDatabase Indurain",m=g.getSelectDatabaseCombo();i.setFormField(m,l);expect(m.getValue()).toBe(l)});it("The user can open up a window to register a new database",function(){g.clickNewDatabase();expect(g.getRegisterDatabaseWindow()).toBeDefined()});it("User can enter a database name",function(){i.setFormField(g.getDatabaseNameField(),f);expect(g.getDatabaseNameField().value).toBe(f)});it("User can enter the machine name",function(){i.setFormField(g.getMachineNameField(),c);expect(g.getMachineNameField().value).toBe(c)});it("User can enter a GenPres Connectionstring",function(){i.setFormField(g.getGenPresConnectionField(),b);expect(g.getGenPresConnectionField().value).toBe(b)});it("User can enter a PDMS Connectionstring",function(){i.setFormField(g.getPdmsConnectionField(),e);expect(g.getPdmsConnectionField().value).toBe(e)});it("User can enter a GenForm Webservice",function(){i.setFormField(g.getGenFormWebserviceField(),d);expect(g.getGenFormWebserviceField().value).toBe(d)});it("A database can be registered",function(){k=f;g.clickRegisterDatabaseButton();waitsFor(g.checkMessage,"response of save",h)})}});Ext.define("GenPres.test.usecase.DrugCompositionTest",{describe:"DrugComposition tests that",tests:function(){var a=this;a.getDrugCompositionController=function(){return GenPres.application.getController("prescription.DrugComposition")};a.getPrescriptionController=function(){return GenPres.application.getController("prescription.PrescriptionController")};a.getComboBox=function(b){return Ext.ComponentQuery.query("combobox[action="+b+"]")[0]};it("There should be a prescription controller",function(){expect(a.getPrescriptionController()).toBeDefined()});it("There should be a drug composition controller",function(){expect(a.getDrugCompositionController()).toBeDefined()});it("There should be a generic combobox",function(){expect(a.getComboBox("generic").inputEl.dom).toBeDefined()});it("There should be a route combobox",function(){expect(a.getComboBox("route").inputEl.dom).toBeDefined()});a.comboIsSet=function(b,c){if(b.store.getCount()>0&&!b.store.loading){b.select(b.store.getAt(0).data.Value);globalvars[c]=(b.getValue()!="")}};it("There should be a shape combobox",function(){expect(a.getComboBox("shape").inputEl.dom).toBeDefined()});it("A generic can be set",function(){var b=a.getComboBox("generic");globalvars.checkGenericSet=false;waitsFor(createBindFunction(a.comboIsSet,a,[b,"checkGenericSet"],"checkGenericSet",200),"waiting for generic to be selected",3000)});it("A route can be set",function(){var b=a.getComboBox("route");globalvars.checkRouteSet=false;waitsFor(createBindFunction(a.comboIsSet,a,[b,"checkRouteSet"],"checkRouteSet",200),"waiting for route to be selected",3000)});it("A shape can be set",function(){component=a.getComboBox("shape");globalvars.checkShapeSet=false;waitsFor(createBindFunction(a.comboIsSet,a,[component,"checkShapeSet"],"checkShapeSet",500),"waiting for shape to be selected",3000)})}});Ext.define("GenPres.test.usecase.PrescriptionPatientTest",{describe:"Prescription tests that",tests:function(){var a=this;a.getGridCount=function(){return a.getGrid().store.getCount()};a.getGrid=function(){var b=GenPres.application.MainCenter.query("prescriptiongrid")[0];return b};a.getPatientComponent=function(b){var d=GenPres.application.MainCenter.query("prescriptionpatient")[0];var c=d.down("unitvaluefield[name="+b+"]");return c};a.checkGridCount=function(b){if(a.getGridCount()==b+1){globalvars.checkGridCount=true}};it("Patient weight can be set",function(){var b=GenPres.application.getController("patient.Patient");b.setPatientWeight(10000,"gram");var c=a.getPatientComponent("patientWeight");expect(c.getValue().value).toBe(10000);expect(c.getValue().unit).toBe("gram")});it("Patient length can be set",function(){var b=GenPres.application.getController("patient.Patient");b.setPatientLength(120,"cm");var c=a.getPatientComponent("patientHeight");expect(c.getValue().value).toBe(120);expect(c.getValue().unit).toBe("cm")})}});Ext.define("GenPres.test.usecase.PrescriptionTest",{describe:"Prescription tests that",tests:function(){var a=this;a.getGridCount=function(){return a.getGrid().store.getCount()};a.getGrid=function(){var b=GenPres.application.MainCenter.query("prescriptiongrid")[0];return b};a.checkGridCount=function(b){if(a.getGridCount()==b+1){globalvars.checkGridCount=true}};a.checkPrescriptionIsSet=function(){var b=GenPres.application.getController("prescription.PrescriptionController");var c=b.getValues();if(c.generic!=""&&c.route!=""&&c.shape!=""){globalvars.checkPrescriptionIsSet=true}};a.checkPrescriptionIsClear=function(){var b=GenPres.application.getController("prescription.PrescriptionController");var c=b.getValues();if(c.generic==""&&c.route==""&&c.shape==""){globalvars.checkPrescriptionIsClear=true}};it("After a patient selection a prescription is cleared",function(){})}});Ext.define("GenPres.test.usecase.SelectPatientTest",{describe:"Select Patient tests that",tests:function(){var a=this,b=false;a.getPatientController=function(){return GenPres.application.getController("patient.Patient")};a.getTreeComp=function(){return Ext.ComponentQuery.query("treepanel")[0]};a.getPatientInfoView=function(){return Ext.ComponentQuery.query("patientinfo")[0]};a.checkDataViewHasItems=function(){var c=a.getFirstNodeEl();if(a.getPatientInfoView().store.data.items.length==1){return true}return false};a.getFirstNodeEl=function(){treeComp=a.getTreeComp();if(typeof(treeComp.el.dom)!="undefined"){var c=Ext.DomQuery.select(".x-grid-cell",treeComp.el.dom)[1];if(typeof(c)!="undefined"){if(b==false){Ext.Function.defer(function(){c.click();b=true},500)}}}};it("There should be a patient controller",function(){expect(a.getPatientController()).toBeDefined()});it("User can select a patient and a dataview is loaded with the patient",function(){waitsFor(a.checkDataViewHasItems,"waiting for patient to be selected",3000)})}});Ext.define("GenPres.test.util.ASyncEventManagerTest",{describe:"GenPres.lib.util.ASyncEventManagerTest",tests:function(){var a;var b=function(e){console.log("result="+e)};var d;var c=function(){if(typeof(d)=="undefined"){d=Ext.create("Ext.data.Store",{autoLoad:false,fields:[{name:"test",type:"string"}],proxy:{type:"direct",directFn:Tests.GetTestStoreData,extraParams:{contents:"qq"},paramOrder:["contents"]}})}return d};Ext.require("GenPres.lib.util.ASyncEventManager");it("ASyncEventManager be initialized",function(){waitsFor(function(){return typeof(GenPres.lib.util)!="undefined"},"waiting for loading ASyncEventMan.",200);runs(function(){a=GenPres.lib.util.ASyncEventManager;expect(a).toBeDefined()})});it("ASyncEventManager can registor store event",function(){c().proxy.extraParams.contents="qq2";c().on("load",function(h,g){console.log(c().data.items[0].data)});a.registerEventListener(c(),"load",[]);expect(a.queue.length==1).toBeTruthy();expect(a.queue[0].length==1).toBeTruthy();a.execute();var e=function(){a.registerDirectEvent(Tests.GetTestData,["list1 1",b]);a.registerDirectEvent(Tests.GetTestData,["list1 2",b]);a.execute()};var f=Ext.Function.defer(e,5000)})}});Ext.define("GenPres.test.util.Query",{singleton:true,getParentViewQuery:function(a){if(typeof(a)=="undefined"){return Ext.ComponentQuery}return a},GetControl:function(b,c){var a=this.getParentViewQuery(c).query("panel[name="+b+"]");if(a.length==0){a=this.getParentViewQuery().query("field[name="+b+"]")}return a[0]},SelectFirstComboboxValue:function(a,b){var c=this.getParentViewQuery(b).query("combobox[name="+a+"]")[0];c.select(c.store.getAt(0).data.Value)},controlStoreIsLoaded:function(a){if(!this.isDefined(a)){return false}if(!this.isDefined(a.store)){return false}return a.store.getCount()>0},isDefined:function(a){return typeof(a)!="undefined"}});Ext.define("GenPres.test.view.DatabaseRegistrationWindowTests",{describe:"DatabaseRegistrationWindowShould",tests:function(){var b=this,a=Ext.create("GenPres.view.database.RegisterDatabaseWindow");b.getDatabaseNameField=function(){return a.getDatabaseNameField()};b.setDatbaseNameField=function(c){b.getDatabaseNameField().value=c};b.getMachineNameField=function(){return a.getMachineNameField()};b.setMachineNameField=function(c){b.getMachineNameField().value=c};b.getGenPresConnectionStringField=function(){return a.getGenPresConnectionStringField()};b.getPdmsConnectionStringField=function(){return a.getPDMSConnectionStringField()};b.getGenFormField=function(){return a.getGenFormWebserviceField()};b.setGenPresConnectionStringField=function(c){b.getGenPresConnectionStringField().value=c};b.setPdmsConnectionStringField=function(c){b.getPdmsConnectionStringField().value=c};b.setGenFormField=function(c){b.getGenFormField().value=c};it("Be defined",function(){expect(a).toBeDefined()});it("Have a field for the database name",function(){expect(a.getDatabaseName).toBeDefined()});it("Have a field for the machine name",function(){expect(a.getMachineName).toBeDefined()});it("Have a field for the GenPres connection string",function(){expect(a.getGenPresConnectionString).toBeDefined()});it("Have a field for the PDMS connection string",function(){expect(a.getPDMSConnectionString).toBeDefined()});it("Have a field for the GenForm webservice",function(){expect(a.getGenFormWebservice).toBeDefined()});it("Be able to set the database name field",function(){b.setDatbaseNameField("test");expect(b.getDatabaseNameField().value).toBe("test")});it("Be able to set the machine name field",function(){b.setMachineNameField("test");expect(b.getMachineNameField().value).toBe("test")});it("Be able to set the genpres connection string field",function(){b.setGenPresConnectionStringField("test1");expect(b.getGenPresConnectionStringField().value).toBe("test1")});it("Be able to set the pdms connection string field",function(){b.setPdmsConnectionStringField("test1");expect(b.getPdmsConnectionStringField().value).toBe("test1")});it("Be able to set the GenFormWebservice field",function(){b.setGenFormField("test1");expect(b.getGenFormField().value).toBe("test1")})}});Ext.define("GenPres.test.view.DrugCompositionTest",{describe:"GenPres.view.Prescription.DrugComposition",tests:function(){var b=this,a,d,c=GenPres.test.util.Query;b.getPrescriptionView=function(e){if(!a){a=Ext.create("GenPres.view.prescription.DrugComposition",e)}return a};b.createFormWindow=function(){d=Ext.create("Ext.Window",{items:b.getPrescriptionView(),height:500,width:1000});d.show();return d};b.getSelect=function(e){return Ext.ComponentQuery.query("window combobox[action="+e+"]")[0]};b.getUnitValueField=function(e){return Ext.ComponentQuery.query("window unitvaluefield[name="+e+"]")[0]};b.hasSaveCancelToolbar=function(e){return Ext.ComponentQuery.query("window[title="+e.title+"] toolbar")[0]};it("can be created",function(){expect(b.getPrescriptionView()).toBeDefined()});it("can be rendered",function(){expect(b.createFormWindow()).toBeDefined()});it("contains a generic field",function(){expect(b.getSelect("generic")).toBeDefined()});it("contains a route field",function(){expect(b.getSelect("route")).toBeDefined()});it("contains a shape field",function(){expect(b.getSelect("shape")).toBeDefined()});it("contains a substance quantity field",function(){expect(b.getUnitValueField("substanceQuantity")).toBeDefined()});it("Substance quantity field has a unit combobox",function(){expect(b.getUnitValueField("substanceQuantity").getUnitCombo()).toBeDefined()});it("When nothing is chosen drugIsChosen returns false ",function(){var e=GenPres.application.getController("prescription.DrugComposition");expect(!e.drugIsChosen()).toBeTruthy()});it("when generic, route and shape is chosen drugIsChosen returns true",function(){waitsFor(function(){var e=c.GetControl("drugGeneric");var g=c.GetControl("drugRoute");var i=c.GetControl("drugShape");if(c.controlStoreIsLoaded(i)){var f=c.GetControl("substanceQuantity",b.getPrescriptionView());c.SelectFirstComboboxValue("drugGeneric");c.SelectFirstComboboxValue("drugRoute");c.SelectFirstComboboxValue("drugShape");var h=GenPres.application.getController("prescription.DrugComposition");return(h.drugIsChosen())}return false},"comboboxes to be rendered",2000)});it("View can be destroyed",function(){b.getPrescriptionView().destroy();expect(b.getPrescriptionView().isDestroyed).toBeTruthy();d.close()})}});Ext.define("GenPres.test.view.PrescriptionFormTest",{describe:"GenPres.view.Prescription.PrescriptionForm",tests:function(){var b=this,a,c;b.getPrescriptionView=function(d){if(!a){a=Ext.create("GenPres.view.prescription.PrescriptionForm",d)}return a};b.createFormWindow=function(){c=Ext.create("Ext.Window",{items:b.getPrescriptionView(),height:520,width:900});c.show();return c};it("can be created",function(){expect(b.getPrescriptionView()).toBeDefined()});it("can be rendered",function(){expect(b.createFormWindow()).toBeDefined()});it("contains a drugcomposition view",function(){var e=Ext.ComponentQuery.query("window prescriptionform")[0];var d=e.query("drugcomposition")[0];expect(d).toBeDefined()});it("View can be destroyed",function(){})}});Ext.define("GenPres.test.view.PrescriptionPatientTest",{describe:"GenPres.view.Prescription.Patient",tests:function(){var b=this,a,c;b.getPrescriptionPatientView=function(d){if(!a){a=Ext.create("GenPres.view.prescription.Patient",d)}return a};b.createWindow=function(){c=Ext.create("Ext.Window",{items:b.getPrescriptionPatientView(),height:520,width:900});c.show();return c};it("can be created",function(){expect(b.getPrescriptionPatientView()).toBeDefined()});it("can be rendered",function(){expect(b.createWindow()).toBeDefined()});it("contains a weight component",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientWeight]")[0];expect(d).toBeDefined()});it("contains a height component",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientHeight]")[0];expect(d).toBeDefined()});it("contains a bsa component",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientBSA]")[0];expect(d).toBeDefined()});it("patient weight should have unit kg",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientWeight]")[0];expect(d.getValue().unit).toBe("kg")});it("patient weight should be 0",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientWeight]")[0];expect(d.getValue().value).toBe(0)});it("patient height should have unit cm",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientHeight]")[0];expect(d.getValue().unit).toBe("cm")});it("patient height should be 0",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientHeight]")[0];expect(d.getValue().value).toBe(0)});it("patient BSA should have unit m2",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientBSA]")[0];expect(d.getValue().unit).toBe("m2")});it("patient BSA should be 0",function(){var d=Ext.ComponentQuery.query("window prescriptionpatient unitvaluefield[name=patientBSA]")[0];expect(d.getValue().value).toBe(0)});it("View can be destroyed",function(){b.getPrescriptionPatientView().destroy();expect(b.getPrescriptionPatientView().isDestroyed).toBeTruthy();c.close()})}});Ext.define("GenPres.test.view.PrescriptionVisibilityTest",{describe:"GenPres.view.Prescription.PrescriptionVisibility",tests:function(){var e=this,a,h,f=GenPres.test.util.Query;GenPres.application.getController("prescription.PrescriptionController").views=[];e.getPrescriptionView=function(i){if(!a){a=Ext.create("GenPres.view.prescription.PrescriptionForm",i)}return a};e.createFormWindow=function(){h=Ext.create("Ext.Window",{items:e.getPrescriptionView(),height:520,width:900});h.show();return h};it("can create a prescription form",function(){e.createFormWindow();expect(a).toBeDefined()});var d=["prescriptionContinuous","substanceQuantity"];for(var b=0;b<d.length;b++){var g=0;var c=0;it(d[b]+" is default hidden",function(){var j=d[g];g++;var i=GenPres.test.util.Query.GetControl(j,e.getPrescriptionView());expect(i.getVisibility()).toBeFalsy()});it(d[b]+" can be set to visible",function(){var j=d[c];c++;var i=GenPres.test.util.Query.GetControl(j,e.getPrescriptionView());i.setVisibility(true);expect(i.getVisibility()).toBeTruthy()})}}});Ext.define("GenPres.test.view.SaveCancelWindowTests",{describe:"GenPres.lib.view.window.SaveCancelWindow",tests:function(){var b=this,a;b.getSaveCancelWindow=function(c){if(!a){a=Ext.create("GenPres.lib.view.window.SaveCancelWindow",c)}return a};b.hasSaveCancelToolbar=function(c){return Ext.ComponentQuery.query("window[title="+c.title+"] toolbar")[0]};it("can be created",function(){expect(b.getSaveCancelWindow()).toBeDefined()});it("should extend an Ext.window.Window",function(){expect(b.getSaveCancelWindow().superclass.$className).toBe("Ext.window.Window")});it("should have a savecancel toolbar",function(){expect(b.hasSaveCancelToolbar(b.getSaveCancelWindow())).toBeDefined()})}});Ext.define("GenPres.view.Main",{extend:Ext.Component,html:"Hello, World!!"});Ext.define("GenPres.view.login.LogicalUnitSelector",{extend:Ext.view.View,alias:"widget.logicalunitselector",margin:"20 0 0 16",itemSelector:"div.LogicalUnitDataViewItem",emptyText:"No logical units found",singleSelect:true,autoScroll:true,store:Shared.util.StoreManager.GetStore("LogicalUnitDto",Login.GetLogicalUnits,{},{autoLoad:true,sorters:[{property:"Name",direction:"ASC"}]}),tpl:new Ext.XTemplate('<tpl for="."><div class="LogicalUnitDataView">','<div class="LogicalUnitDataViewItem">',"{Name}","</div>","</div></tpl>"),initComponent:function(){var a=this;a.callParent()}});Ext.define("GenPres.view.main.MainView",{extend:Ext.Panel,layout:"fit",border:false,constructor:function(){var a=this;a.callParent(arguments)},initComponent:function(){var a=this;a.items=[];a.callParent();return a}});Ext.define("GenPres.view.main.MainViewCenter",{extend:Ext.Panel,region:"center",xtype:"panel",border:false,layout:"border",initComponent:function(){var a=this;a.items=[Ext.create("GenPres.view.main.MainViewCenterContainer"),Ext.create("GenPres.view.prescription.PrescriptionTabs")];GenPres.application.MainCenter=this;a.callParent()},height:100,split:true});Ext.define("GenPres.view.main.MainViewCenterContainer",{extend:Ext.Panel,region:"center",xtype:"panel",activeItem:0,border:false,layout:"card",bodyStyle:{background:"#f0f0f0",},initComponent:function(){var a=this;a.items=[{id:"card-0",xtype:"box",html:"<br /><br /><h1>&nbsp;&nbsp;&nbsp;Welkom bij GenPres - Development version</h1>",border:false}];a.dockedItems=Ext.create("GenPres.view.main.TopToolbar");GenPres.application.MainCenterContainer=this;a.callParent()},height:100,split:false,margins:"0 0 0 0"});Ext.define("GenPres.view.main.PatientInfo",{extend:Ext.view.View,colspan:4,alias:"widget.patientinfo",itemSelector:"patientInfo",tpl:new Ext.XTemplate('<tpl for=".">','<div class="patientIcon"><div class="PatientInfoPid">{PID}</div></div><div class="patientNameInfo">','<b><span style="font-size:12px;">{LastName}, {FirstName}</span></b><br />','<div class="patientInfoValue">','<div class="patientInfoHeader"><b>Afdeling/bed:</b> {Unit} - {Bed}</div><br />','<div class="patientInfoHeader"><b>Opname: {RegisterDate}</b></div><br />','<div class="patientInfoHeader"><b>Ligdag: {Days}</b></div>',"</div>","</div>","</tpl>"),store:"patient.PatientInfoStore",initComponent:function(){var a=this;a.callParent()}});Ext.define("GenPres.view.main.PatientTree",{extend:Ext.view.View,alias:"widget.patientlist",margin:"0 0 0 0",itemSelector:"div.PatientViewItem",emptyText:"No logical units found",singleSelect:true,autoScroll:true,padding:"4 4 4 4",store:Shared.util.StoreManager.GetStore("PatientDto",Patient.GetPatientsByLogicalUnit,{logicalUnit:"26240f04-310b-4e1a-be77-7986dea8aff3"},{autoLoad:false}),tpl:new Ext.XTemplate('<tpl for="."><div class="PatientView">','<div class="PatientViewItem">','<div class="PatientViewIcon"></div>','<div class="PatientViewText">','<div>{FirstName}&nbsp;{LastName}</div><div style="font-size:10px;">16-03-1983</div>',"</div>","</div>","</div></tpl>"),initComponent:function(){var a=this;a.callParent()}});Ext.define("GenPres.view.main.ToolbarButton",{extend:Ext.button.Button,text:"",scale:"small",location:"Frontend/Styles/GenPres/images/TopToolbar/",iconAlign:"left",disabled:false,width:60,initComponent:function(){var a=this;a.icon=a.location+a.icon;a.callParent()}});Ext.define("GenPres.view.main.TopToolbar",{extend:Ext.container.ButtonGroup,dock:"top",initComponent:function(){var a=this;a.items=[{xtype:"buttongroup",columns:3,title:"Algemeen",height:96,items:[Ext.create("GenPres.view.main.ToolbarButton",{icon:"Home_32.png",text:"Home",width:80,action:"home",rowspan:2,scale:"large",iconAlign:"top"}),Ext.create("GenPres.view.main.ToolbarButton",{icon:"Prescription_32.png",text:"Voorschrijven",width:130}),Ext.create("GenPres.view.main.ToolbarButton",{icon:"TPN_32.png",text:"TPN",width:70}),Ext.create("GenPres.view.main.ToolbarButton",{icon:"TPN_32.png",text:"Aanpassen",width:130})]},{xtype:"tbseparator",height:20},{xtype:"buttongroup",columns:3,title:"Opties",height:96,items:[Ext.create("GenPres.view.main.ToolbarButton",{icon:"Template_32.png",text:"Sjablonen",width:100}),{xtype:"tbseparator",height:20},Ext.create("GenPres.view.main.ToolbarButton",{icon:"NewMedicine_32.png",text:"Nieuw medicament",width:175})]},{xtype:"buttongroup",columns:1,title:"Patient informatie",height:96,width:350,items:Ext.create("GenPres.view.main.PatientInfo")},{xtype:"buttongroup",columns:1,height:96,html:"medewerker info",width:200,title:"Medewerker"}];a.callParent()}});Ext.define("GenPres.view.prescription.PrescriptionGrid",{extend:Ext.grid.Panel,border:false,bodyStyle:{background:"#f0f0f0",},alias:"widget.prescriptiongrid",title:"voorscrhiften",columns:[{header:"StartDate",dataIndex:"StartDate"},{header:"Generiek",dataIndex:"drugGeneric"}],initComponent:function(){var a=this;a.callParent()}});Ext.define("GenPres.view.prescription.PrescriptionTabs",{extend:Ext.tab.Panel,region:"south",border:false,bodyStyle:{background:"#f0f0f0",},initComponent:function(){var a=this;a.items=[Ext.create("GenPres.view.prescription.PrescriptionGrid"),{title:"Totalen",xtype:"box",html:"Under construction"},{title:"Overzicht",xtype:"box",html:"Under construction"}];a.callParent()},height:200,split:true});