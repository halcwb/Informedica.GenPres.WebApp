Ext.define("Shared.util.ModelLoader",{singleton:true,Load:function(d){for(var b=0;b<d.length;b++){if(d[b].Properties.length==0){continue}var a=[];for(var c=0;c<d[b].Properties.length;c++){a.push({name:d[b].Properties[c].Name,type:d[b].Properties[c].Type.toLowerCase()})}Ext.define(d[b].Name,{extend:"Ext.data.Model",clientIdProperty:"Id",fields:a})}}});Shared.util.ModelLoader.Load(Ext.app.REMOTE_MODELS);Ext.define("Shared.util.Process",{currentProcessNr:0,doProcess:function(d){var e=this;if(typeof(e.spot)=="undefined"){e.spot=Ext.create("Shared.util.Spotlight",{easing:"easeOut",duration:300})}e.name=d;var c;var h=e.Processes[d];var g=h[e.currentProcessNr];var f=e.query(g.component);if(f.length==1){c=f[0]}if(c.el){e.spot.show(c.el)}c.on("click",function(){if(e.currentProcessNr==(h.length-1)){e.spot.hide();e.tooltip.destroy()}});var b={target:c.el,anchor:"left",title:d,html:g.text,dockedItems:[{xtype:"toolbar",baseCls:"none",dock:"bottom",items:["->",new Ext.Button({text:"Next",hidden:(e.currentProcessNr==(h.length-1)),handler:e.processNext,scope:e})]}],minWidth:100,minHeight:100,autoHide:false,closable:true};e.tooltip=Ext.create("Ext.tip.ToolTip",b);var a=Ext.Function.createDelayed(function(){e.tooltip.el.dom.style.zIndex=222001},50);e.tooltip.show();e.tooltip.zIndexManager.setBase().zseed=222001;a()},processNext:function(){var a=this;a.tooltip.destroy();a.currentProcessNr++;a.doProcess(a.name)}});Ext.define("Shared.util.Spotlight",{mixins:{observable:Ext.util.Observable},baseCls:"x-spotlight",animate:true,duration:250,easing:null,active:false,constructor:function(a){var b=this;b.mixins.observable.constructor.call(b)},createElements:function(){var a=Ext.getBody();this.right=a.createChild({cls:this.baseCls});this.left=a.createChild({cls:this.baseCls});this.top=a.createChild({cls:this.baseCls});this.bottom=a.createChild({cls:this.baseCls});this.all=Ext.create("Ext.CompositeElement",[this.right,this.left,this.top,this.bottom])},show:function(b,c,a){this.el=Ext.get(b);if(!this.right){this.createElements()}if(!this.active){this.all.setDisplayed("");this.active=true;Ext.EventManager.onWindowResize(this.syncSize,this);this.applyBounds(this.animate,false)}else{this.applyBounds(false,false)}},hide:function(b,a){Ext.EventManager.removeResizeListener(this.syncSize,this);this.applyBounds(this.animate,true)},syncSize:function(){this.applyBounds(false,false)},applyBounds:function(a,g){var j=this,e=j.el.getBox();var f=Ext.core.Element.getViewWidth(true);var c=Ext.core.Element.getViewHeight(true);var d=0,b=false,l,k;l={right:{x:e.right,y:c,width:(f-e.right),height:0},left:{x:0,y:0,width:e.x,height:0},top:{x:f,y:0,width:0,height:e.y},bottom:{x:0,y:(e.y+e.height),width:0,height:(c-(e.y+e.height))+"px"}};k={right:{x:e.right,y:e.y,width:(f-e.right)+"px",height:(c-e.y)+"px"},left:{x:0,y:0,width:e.x+"px",height:(e.y+e.height)+"px"},top:{x:e.x,y:0,width:(f-e.x)+"px",height:e.y+"px"},bottom:{x:0,y:(e.y+e.height),width:(e.x+e.width)+"px",height:(c-(e.y+e.height)+1)+"px"}};if(g){var h=Ext.clone(l);l=k;k=h;delete h}if(a){Ext.each(["right","left","top","bottom"],function(i){j[i].setBox(l[i]);j[i].animate({duration:j.duration,easing:j.easing,to:k[i]})},this)}else{Ext.each(["right","left","top","bottom"],function(i){j[i].setBox(Ext.apply(l[i],k[i]))},this)}},destroy:function(){Ext.destroy(this.right,this.left,this.top,this.bottom);delete this.el;delete this.all}});Ext.direct.Manager.addProvider(Ext.app.REMOTING_API);Ext.define("Shared.util.StoreManager",{singleton:true,stores:{},GetStore:function(f,a,h,b){if(typeof(this.stores[f])=="undefined"){var e=Ext.create(f);var c=[];for(var g in h){c.push(g)}var d={model:f,proxy:Ext.create("Ext.data.proxy.Direct",{type:"direct",directFn:a,paramsAsHash:false,paramOrder:c,extraParams:h})};Ext.applyIf(d,b);this.stores[f]=Ext.create("Ext.data.Store",d)}return this.stores[f]}});Ext.define("Management.view.Viewport",{extend:Ext.Viewport,layout:"border",items:[{region:"north",height:50,tbar:[{html:'<img src="../ClientApplications/Styles/GenPres/images/logo.png" />',height:40,width:200,xtype:"box"},{text:"Users",action:"users",scale:"large"},{text:"Logical units",action:"logical_units",scale:"large"},{text:"Patients",action:"patients",scale:"large"}]},{region:"center",layout:"fit",margin:"20 20 20 20"}],renderTo:Ext.getBody()});Ext.define("Management.view.EditableModelGrid",{extend:Ext.grid.Panel,alias:["widget.editablemodelgrid"],initComponent:function(){var a=this;Ext.applyIf(a,{selType:"rowmodel",plugins:[Ext.create("Ext.grid.plugin.RowEditing",{clicksToEdit:2,errorSummary:false})],dockedItems:[{xtype:"toolbar",dock:"top",items:[{xtype:"button",action:"new",text:"New"},{xtype:"button",action:"remove ",text:"Delete"}]}]});a.callParent(arguments)}});Ext.define("Management.view.UserGrid",{extend:Management.view.EditableModelGrid,title:"Users",alias:["widget.usergrid"],store:Shared.util.StoreManager.GetStore("UserDto",Management.GetUsers),initComponent:function(){var a=this;Ext.applyIf(a,{region:"center",columns:[{xtype:"gridcolumn",width:197,dataIndex:"Username",text:"Username",editor:{xtype:"textfield",allowBlank:false}},{xtype:"gridcolumn",width:211,dataIndex:"Password",text:"Password",editor:{xtype:"textfield",allowBlank:false}}]});a.callParent(arguments)}});Ext.define("Management.view.LogicalUnitGrid",{extend:Management.view.EditableModelGrid,title:"Logical units",alias:["widget.logicalunitgrid"],store:Shared.util.StoreManager.GetStore("LogicalUnitDto",Management.GetLogicalUnits),initComponent:function(){var a=this;Ext.applyIf(a,{region:"center",columns:[{xtype:"gridcolumn",width:400,dataIndex:"Name",text:"Name",editor:{xtype:"textfield",allowBlank:false}}]});a.callParent(arguments)}});var rowRenderer=function(a){};Ext.define("Management.view.PatientGrid",{extend:Management.view.EditableModelGrid,title:"Patients",alias:["widget.patientgrid"],store:Shared.util.StoreManager.GetStore("PatientDto",Management.GetPatients),initComponent:function(){var b=this;var a=Shared.util.StoreManager.GetStore("LogicalUnitDto",Management.GetLogicalUnits);a.reload();Ext.applyIf(b,{region:"center",columns:[{xtype:"gridcolumn",width:400,dataIndex:"FirstName",text:"First Name",editor:{xtype:"textfield",allowBlank:false}},{xtype:"gridcolumn",width:400,dataIndex:"LastName",text:"Last Name",editor:{xtype:"textfield",allowBlank:false}},{xtype:"gridcolumn",width:400,dataIndex:"LogicalUnitId",text:"Logical Unit",renderer:function(i,c,e,g,k,j,h){var f=c.column.getEditor(),d=f.findRecord(f.valueField,i);return d?d.get(f.displayField):i},editor:{typeAhead:true,xtype:"combobox",forceSelection:true,displayField:"Name",valueField:"Id",allowBlank:false,store:a}}]});b.callParent(arguments)}});Ext.Loader.setConfig({enabled:true,paths:{Shared:"../ClientApplications/Shared",Management:"../ClientApplications/Management"}});Ext.application({init:function(){this.control({"button[action=users]":{click:this.showUsers},"button[action=logical_units]":{click:this.showLogicalUnits},"button[action=patients]":{click:this.showPatients}})},refs:[{ref:"viewport",selector:"viewport"}],name:"Management",appFolder:"../ClientApplications/Management",autoCreateViewport:true,controllers:["UserEditingController","LogicalUnitController","PatientController"],showUsers:function(){this.getViewport().remove(1);this.getViewport().add(Ext.create("Management.view.UserGrid"))},showLogicalUnits:function(){this.getViewport().remove(1);this.getViewport().add(Ext.create("Management.view.LogicalUnitGrid"))},showPatients:function(){this.getViewport().remove(1);this.getViewport().add(Ext.create("Management.view.PatientGrid"))}});Ext.define("Management.controller.LogicalUnitController",{extend:Ext.app.Controller,refs:[{ref:"LogicalUnitGrid",selector:"grid"}],init:function(){this.control({"logicalunitgrid button[action=new]":{click:this.newLogicalUnit},"logicalunitgrid button[text=Delete]":{click:this.deleteLogicalUnit},logicalunitgrid:{canceledit:this.cancelEdit,edit:this.commitRecord}})},deleteLogicalUnit:function(){var b=this.getLogicalUnitGrid();var a=b.selModel.getSelection()[0];Management.DeleteLogicalUnit(a.data,function(c){b.store.reload()})},newLogicalUnit:function(){var a=this.getLogicalUnitGrid().plugins[0];a.cancelEdit();var b=Ext.create("LogicalUnitDto",{Name:""});this.getLogicalUnitGrid().store.insert(0,b);a.startEdit(0,0)},cancelEdit:function(a,c,b){if(c.record.data.Name==""){c.store.remove(c.record)}},commitRecord:function(b,c){var a=this.getLogicalUnitGrid();Management.SaveLogicalUnit(c.record.data,function(d){a.store.reload()})}});Ext.define("Management.controller.PatientController",{extend:Ext.app.Controller,refs:[{ref:"PatientGrid",selector:"grid"}],init:function(){this.control({"patientgrid button[action=new]":{click:this.newPatient},"patientgrid button[text=Delete]":{click:this.deletePatient},patientgrid:{canceledit:this.cancelEdit,edit:this.commitRecord}})},deletePatient:function(){var b=this.getPatientGrid();var a=b.selModel.getSelection()[0];Management.DeletePatient(a.data,function(c){b.store.reload()})},newPatient:function(){var a=this.getPatientGrid().plugins[0];a.cancelEdit();var b=Ext.create("PatientDto",{Name:""});this.getPatientGrid().store.insert(0,b);a.startEdit(0,0)},cancelEdit:function(a,c,b){if(c.record.data.Name==""){c.store.remove(c.record)}},commitRecord:function(a,b){var c=this.getPatientGrid();Management.SavePatient(b.record.data,function(d){c.store.reload()})}});Ext.define("Management.controller.UserEditingController",{extend:Ext.app.Controller,refs:[{ref:"UserGrid",selector:"grid"}],init:function(){this.control({"usergrid button[action=new]":{click:this.newUser},"usergrid button[text=Delete]":{click:this.deleteUser},usergrid:{canceledit:this.cancelEdit,edit:this.commitRecord}})},deleteUser:function(){var b=this.getUserGrid();var a=b.selModel.getSelection()[0];Management.DeleteUser(a.data,function(c){b.store.reload()})},newUser:function(){var a=this.getUserGrid().plugins[0];a.cancelEdit();var b=Ext.create("UserDto",{Username:"",Password:""});this.getUserGrid().store.insert(0,b);a.startEdit(0,0)},saveUser:function(){var a=this.getUserGrid().store},cancelEdit:function(a,c,b){if(c.record.data.Username==""||c.record.data.Password==""){c.store.remove(c.record)}},commitRecord:function(a,c){var b=this.getUserGrid();Management.SaveUser(c.record.data,function(d){b.store.reload()})}});